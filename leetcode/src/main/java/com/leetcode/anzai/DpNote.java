package com.leetcode.anzai;

public class DpNote {
    /**
     * 动态规划法适用于多阶段决策求最优解模型，每个阶段决策都会产生一组的状态，
     * 而且当前阶段决策会用到上一阶段的决策状态，所以通常会有一个数组来存储一系列的状态
     *
     * 同时动态规划会有三大特征：
     * a. 最优子结构：问题的最优解包含子问题的最优解，反过来说就是，我们可以通过子问题的最优解，推导出问题的最优解，也就是具有状态转移方程
     * b. 无向后性：只用关心上一阶段的状态，而不需要关心上一阶段的状态是怎么推导出来的，同时一旦这个阶段的状态确定了，就不受后面其它阶段决策的影响，即不会被改变
     * c. 重复子问题
     *
     *
     * 思考求解思路过程如下：
     * 1.根据回溯算法和状态树寻找重复子问题（回溯算法使用的状态参数很重要，会直接影响到状态转移方程，
     * 比如本身可以用f(n)表示的，选成了f(i,n)那就会增加复杂度，或者本身用f(i)但是用到了f(n)，这会导致列出错误的状态转移方程，进而得出错误的解；
     * 2.回溯算法添加备忘录
     * 3.定义状态数组并列出状态转移方程
     * 4.将求解状态数组的步骤翻译成代码
     */

}
