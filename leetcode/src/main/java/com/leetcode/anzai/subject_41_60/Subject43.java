package com.leetcode.anzai.subject_41_60;

/**
 * 字符串相乘
 * https://leetcode-cn.com/problems/multiply-strings/
 */
public class Subject43 {

    /**
     *
     给定两个以字符串形式表示的非负整数?num1?和?num2，返回?num1?和?num2?的乘积，它们的乘积也表示为字符串形式。

     示例 1:

     输入: num1 = "2", num2 = "3"
     输出: "6"
     示例?2:

     输入: num1 = "123", num2 = "456"
     输出: "56088"
     说明：

     num1?和?num2?的长度小于110。
     num1 和?num2 只包含数字?0-9。
     num1 和?num2?均不以零开头，除非是数字 0 本身。
     不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。
     *
     */

    /**
     * 使用 n*n 的方式，尴尬的是这个比 Karatsuba 还快
     *
     * @param num1
     * @param num2
     * @return
     */
    public String multiply(String num1, String num2) {
        long currentTime = System.currentTimeMillis();
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        int length1 = num1.length();
        int length2 = num2.length();
        StringBuilder str = new StringBuilder();

        int[] arrayInt = new int[length1 + length2];

        for (int i = length1 - 1; i >= 0; i--) {
            for (int z = length2 - 1; z >= 0; z--) {
                int number1 = num1.charAt(i) - 48;
                int number2 = num2.charAt(z) - 48;
                arrayInt[i + z] += number1 * number2;
                if (arrayInt[i + z] >= 10 && (i + z) != 0) {
                    arrayInt[i + z - 1] += arrayInt[i + z] / 10;
                    arrayInt[i + z] = arrayInt[i + z] % 10;
                }
            }
        }

        for (int i = 0; i <= length1 + length2 - 2; i++) {
            str.append(arrayInt[i]);
        }
        String result = str.toString();
        System.out.println("耗时:" + (System.currentTimeMillis() - currentTime));
        return result;
    }

    /**
     * Karatsuba 实现大数相乘：
     * 计算：x * y
     * x = = (a ? 10^n/2 + b)       y = (c ? 10^n/2 + d)；
     * .
     * 这里的 n 是数字的位数。如果是偶数，则 a 和 b 都是 n/2 位的。如果 n 是奇数，则你可以让 a 是 n/2+1 位，b 是 n/2 位。（例如 a = 12，b = 34；a = 123，b = 45）
     * .
     * 那么 x * Y 就变成：x ? y = (a ? 10^n/2 + b) ? (c ? 10^n/2 + d)
     * 进一步计算:
     * x ? y = a ? c ? 10^n + (a?d + b?c) ? 10^n/2 + bd
     * .
     * 接下来依次递归到比较小的数再直接相乘即可
     * .
     * 利用分治和递归逐步把大数变小数再相乘然后加起来，不过这里也要解决两个大数相加的问题
     * .
     * Karatsuba 算法是比较简单的递归乘法，把输入拆分成 2 部分，不过对于更大的数，可以把输入拆分成 3 部分甚至 4 部分。
     * 拆分为 3 部分时，可以使用下面的 Toom-Cook 3-way 乘法，复杂度降低到 O(n^1.465)。
     * 拆分为 4 部分时，使用 Toom-Cook 4-way 乘法，复杂度进一步下降到 O(n^1.404)。
     * 对于更大的数字，可以拆成 100 段，使用 快速傅里叶变换FFT（Toom-Cook multiplication），复杂度接近线性，大约是 O(n^1.149)。
     * 可以看出，分割越大，时间复杂度就越低，但是所要计算的中间项以及合并最终结果的过程就会越复杂，开销会增加，
     *
     * @param num1
     * @param num2
     * @return
     */
    public String multiply1(String num1, String num2) {
        long currentTime = System.currentTimeMillis();
        if (num1 == null || "".equals(num1))
            return null;
        if (num2 == null || "".equals(num2))
            return null;
        String result = multiplyInternal(num1, num2);
        System.out.println("耗时:" + (System.currentTimeMillis() - currentTime));
        return result;
    }

    /**
     * Karatsuba 乘法递归
     *
     * @param num1
     * @param num2
     * @return
     */
    private String multiplyInternal(String num1, String num2) {
        if (num1.length() + num2.length() <= 17) { // 保证长整型不会溢出
            return Long.parseLong(num1) * Long.parseLong(num2) + "";
        }

        if (num1.length() == 1)
            return multiplySimple(num2, num1);
        if (num2.length() == 1)
            return multiplySimple(num1, num2);

        int len1 = num1.length();
        int len2 = num2.length();
        int n1 = len1 / 2;
        int n2 = len2 / 2;
        // x = = (a ? 10^n1 + b)       y = (c ? 10^n2 + d)；
        // x ? y = (a ? 10^n1 + b) ? (c ? 10^n2 + d)
        // x ? y = a ? c ? 10^(n1 + n2) + a?d * 10^n1 + b?c ? 10^n2 + bd

        String a = num1.substring(0, len1 - n1);
        String b = num1.substring(len1 - n1, len1);
        String c = num2.substring(0, len2 - n2); // 如果是奇书要加1
        String d = num2.substring(len2 - n2, len2);

        String ac = temMi(multiplyInternal(a, c), n1 + n2);
        String ad = temMi(multiplyInternal(a, d), n1);
        String bc = temMi(multiplyInternal(b, c), n2);
        String bd = multiplyInternal(b, d);

        return add(add(ac, ad), add(bc, bd));
    }

    /**
     * 简单的乘法，应对一个长长的数乘一个单数
     *
     * @param longStr 长字符串
     * @param oneStr  单个字符串
     * @return
     */
    private String multiplySimple(String longStr, String oneStr) {
        if ("0".equals(oneStr))
            return "0";
        longStr = new StringBuilder(longStr).reverse().toString(); // 反转
        StringBuilder sb = new StringBuilder(longStr.length() + 1);
        int oneIn = oneStr.charAt(0) - '0';
        int next = 0; // 保存向上进位的数
        for (int i = 0; i < longStr.length(); i++) {
            int multiplyValue = (longStr.charAt(i) - '0') * oneIn + next; // next 是进位
            next = multiplyValue / 10;
            sb.append(multiplyValue % 10);
        }
        if (next != 0)
            sb.append(next);
        return sb.reverse().toString();
    }

    /**
     * 返回 value 乘 10 的n次幂
     *
     * @param value
     * @param n
     * @return
     */
    private String temMi(String value, int n) {
        StringBuilder sb = new StringBuilder(value);
        for (int i = 0; i < n; i++) {
            sb.append(0);
        }
        return sb.toString();
    }

    /**
     * 两个大数相乘
     *
     * @param num1
     * @param num2
     * @return
     */
    private String add(String num1, String num2) {
        if (num1 == null || "".equals(num1))
            return num2;
        if (num2 == null || "".equals(num2))
            return num1;
        if (num1.length() <= 17 && num2.length() <= 17) { // 保证长整型不会溢出
            return Long.parseLong(num1) + Long.parseLong(num2) + "";
        }
        num1 = new StringBuilder(num1).reverse().toString(); // 反转
        num2 = new StringBuilder(num2).reverse().toString(); // 反转
        int len1 = num1.length();
        int len2 = num2.length();
        int minLen = Math.min(len1, len2);
        StringBuilder sb = new StringBuilder(Math.max(len1, len2) + 1); // 确定长度省得自动扩展，加1防止有进位

        int next = 0; // 保存向上进位的数
        int i = 0;
        for (; i < minLen; i++) {
            int addValue = (num1.charAt(i) - '0') + (num2.charAt(i) - '0') + next; // next 是进位
            next = addValue / 10;
            sb.append(addValue % 10);
        }

        // 计算单边剩余的
        String rest = len1 == minLen ? num2 : num1;
        for (int j = i; j < rest.length(); j++) {
            int addValue = (rest.charAt(j) - '0') + next; // next 是进位
            next = addValue / 10;
            sb.append(addValue % 10);
        }

        if (next != 0)
            sb.append(next);

        return sb.reverse().toString(); // 也要反转
    }

    public static void main(String[] args) {
        Subject43 subject = new Subject43();
        System.out.println(subject.multiply
                "12345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765431234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432111234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789876543211234567892345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234563211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567898765432112345678979987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678912345679987654321123456789123456799876543211234567891234567998765432112345678921123456789"));
    }

}
