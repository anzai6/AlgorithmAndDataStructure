package com.example.lib.course60_exercise.solution;

/**
 * Reverse Words in a String（翻转字符串里的单词）
 * https://leetcode-cn.com/problems/reverse-words-in-a-string/
 */

public class ReverseWordsSolution {

    /**
     *
     给定一个字符串，逐个翻转字符串中的每个单词。

     示例 1：

     输入: "the sky is blue"
     输出:?"blue is sky the"
     示例 2：

     输入: "  hello world!  "
     输出:?"world! hello"
     解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
     示例 3：

     输入: "a good   example"
     输出:?"example good a"
     解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
     ?

     说明：

     无空格字符构成一个单词。
     输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
     如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
     ?

     进阶：

     请选用 C 语言的用户尝试使用?O(1) 额外空间复杂度的原地解法。

     *
     */


    /**
     * 翻转语句
     *
     * @param s
     * @return
     */
    public String reverseWords(String s) {
        if (s == null || s.length() == 0)
            return s;
        String[] strList = s.split(" ");
        StringBuilder sb = new StringBuilder();
        boolean isFirstWord = false;
        for (int i = strList.length - 1; i >= 0; i--) {
            if (!"".equals(strList[i])) { // 不是空字符就是单词
                if (!isFirstWord)
                    isFirstWord = true;
                else  // 非第一位的单词前面添加空格
                    sb.append(" ");
                sb.append(strList[i]);
            } else {
            }
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        ReverseWordsSolution solution = new ReverseWordsSolution();
        System.out.println(solution.reverseWords("the sky is blue"));
    }
}
